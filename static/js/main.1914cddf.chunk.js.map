{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokemon.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["imgSrc","id","url","Pokecard","className","this","props","name","src","alt","type","exp","Component","Pokedex","console","log","isWinner","title","totalExp","pokemon","map","p","base_experience","a","j","x","i","length","Math","floor","random","shuffle","Pokegame","poke","hl","ceil","team1","slice","team2","team","expList","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1914cddf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Pokecard.css\";\r\n\r\nconst POKE_API = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n\r\nclass Pokecard extends Component {\r\n  render() {\r\n    //let imgSrc = `${POKE_API}${this.props.id}.png`;\r\n    //let padToTHree = (number) =>  (number <=999 ? `00${number}`.slice(-3) :number);\r\n    return (\r\n      <div className=\"Pokecard\">\r\n        <h1 className=\"Pokecard-title\">{this.props.name}</h1>\r\n        <img src={imgSrc(this.props.id)} alt={this.props.name} />\r\n        <div className=\"Pokecard-data\">Type: {this.props.type}</div>\r\n        <div className=\"Pokecard-data\">EXP: {this.props.exp}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction imgSrc(id) {\r\n  let url = POKE_API;\r\n\r\n  if (id < 10) {\r\n    url += \"00\";\r\n    url += id;\r\n    url += \".png\";\r\n    return url;\r\n  } else if (id >= 10 && id < 100) {\r\n    url += \"0\";\r\n    url += id;\r\n    url += \".png\";\r\n    return url;\r\n  } else {\r\n    url += id;\r\n    url += \".png\";\r\n    return url;\r\n  }\r\n}\r\n\r\nexport default Pokecard;\r\n","import React, { Component } from \"react\";\r\nimport Pokecard from \"./Pokecard\";\r\nimport \"./Pokedex.css\";\r\n\r\nclass Pokedex extends Component {\r\n  render() {\r\n    console.log(this.props.isWinner);\r\n    return (\r\n      <div className=\"Pokedex\">\r\n        <h1 className=\"Pokedex-title\">\r\n          {this.props.title}: {this.props.totalExp}\r\n        </h1>\r\n        <div className=\"Pokedex-cards\">\r\n          {this.props.pokemon.map((p) => (\r\n            <Pokecard\r\n              id={p.id}\r\n              name={p.name}\r\n              type={p.type}\r\n              exp={p.base_experience}\r\n            />\r\n          ))}\r\n        </div>\r\n        <h2 className=\"Pokedex-winner\">\r\n          {this.props.isWinner ? \"THIS HAND WINS!\" : \"\"}\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokedex;\r\n","let pokemon = [\r\n  { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\r\n  { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\r\n  { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\r\n  { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\r\n  { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\r\n  { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\r\n  { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\r\n  { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 },\r\n];\r\n\r\nshuffle(pokemon);\r\n\r\nfunction shuffle(a) {\r\n  var j, x, i;\r\n  for (i = a.length - 1; i > 0; i--) {\r\n    j = Math.floor(Math.random() * (i + 1));\r\n    x = a[i];\r\n    a[i] = a[j];\r\n    a[j] = x;\r\n  }\r\n  return a;\r\n}\r\n\r\nexport default pokemon;\r\n","import React, { Component } from \"react\";\r\nimport Pokedex from \"./Pokedex\";\r\nimport pokemon from \"./Pokemon\";\r\nimport Pokecard from \"./Pokecard\";\r\n\r\nclass Pokegame extends Component {\r\n  static defaultProps = { pokemon };\r\n  render() {\r\n    let poke = this.props.pokemon;\r\n    let hl = Math.ceil(poke.length / 2);\r\n    let team1 = poke.slice(0, hl);\r\n    let team2 = poke.slice(hl, poke.length);\r\n\r\n    return (\r\n      <div className=\"Pokegame\">\r\n        <Pokedex\r\n          title=\"Team 1\"\r\n          totalExp={totalExp(team1)}\r\n          isWinner={isWinner(team1, team2)}\r\n          pokemon={team1}\r\n        />\r\n        <Pokedex\r\n          title=\"Team 2\"\r\n          totalExp={totalExp(team2)}\r\n          pokemon={team2}\r\n          isWinner={isWinner(team2, team1)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction isWinner(team1, team2) {\r\n  return totalExp(team1) > totalExp(team2);\r\n}\r\n\r\nfunction totalExp(team) {\r\n  let expList = team.map((x) => x.base_experience);\r\n\r\n  var exp = 0;\r\n  var i;\r\n\r\n  for (i = 0; i < expList.length; i++) {\r\n    exp += expList[i];\r\n  }\r\n\r\n  return exp;\r\n}\r\n\r\nexport default Pokegame;\r\n","import React from \"react\";\nimport Pokecard from \"./Pokecard\";\nimport Pokedex from \"./Pokedex\";\nimport Pokegame from \"./Pokegame\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Pokegame />\n    </div>\n  );\n}\n\n//<Pokecard id={4} name=\"Charmander\" type=\"Fire\" exp={62} />\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}